#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("insurance-api:server");
var http = require("http");
var MongoClient = require("mongodb").MongoClient;
var clean = require("mongo-clean");
var request = require("request");
var Mongonaut = require("mongonaut");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Load MongoDB with external API data
 */

var db;

MongoClient.connect("mongodb://localhost/insurance-api", (err, database) => {
  if (err) throw error;

  // Delete all data in database
  clean(database, function() {
    db = database;
    fillDatabase();
  });
});

function fillDatabase() {
  request("http://www.mocky.io/v2/5808862710000087232b75ac", function(
    error,
    response,
    body
  ) {
    if (error) throw error;
    var data = JSON.parse(body).clients;
    db.collection("users").insert(data, function(error, record) {
      if (error) throw error;
      console.log("users data saved");
    });
    request("http://www.mocky.io/v2/580891a4100000e8242b75c5", function(
      error,
      response,
      body
    ) {
      if (error) throw error;
      var data = JSON.parse(body).policies;
      db.collection("policies").insert(data, function(error, record) {
        if (error) throw error;
        console.log("policies data saved");
        db
          .collection("users")
          .createIndex("id", { unique: true }, function(error, record) {
            if (error) throw error;
            console.log("users id index created");
            db
              .collection("policies")
              .createIndex("id", { unique: true }, function(error, record) {
                if (error) throw error;
                console.log("policies id index created");
                db.close();
                startServer();
              });
          });
      });
    });
  });
}

/**
 * Listen on provided port, on all network interfaces.
 */
function startServer() {
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
